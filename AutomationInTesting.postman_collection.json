{
	"info": {
		"_postman_id": "1846ffb9-61a0-45ce-9e3a-37c352ea617f",
		"name": "MoT Automation Week API Challenge",
		"description": "Check each response content-type and type/format for each response body item.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "CreateTokenAutomationInTesting",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5a8b05b7-44b7-46c2-b3a8-1a60ccd77298",
								"exec": [
									"pm.test(\"Response Content-Type should be json\", function () {\r",
									"     pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"postman.setEnvironmentVariable(\"authToken\", jsonData.token);\r",
									"\r",
									"schema = {\r",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema\",\r",
									"    \"$id\": \"http://example.com/example.json\",\r",
									"    \"type\": \"object\",\r",
									"    \"title\": \"The root schema\",\r",
									"    \"description\": \"The root schema comprises the entire JSON document.\",\r",
									"    \"default\": {},\r",
									"    \"examples\": [\r",
									"        {\r",
									"            \"token\": \"1234a56f78b90cd\"\r",
									"        }\r",
									"    ],\r",
									"    \"required\": [\r",
									"        \"token\"\r",
									"    ],\r",
									"    \"properties\": {\r",
									"        \"token\": {\r",
									"            \"$id\": \"#/properties/token\",\r",
									"            \"type\": \"string\",\r",
									"            \"title\": \"The token schema\",\r",
									"            \"description\": \"An explanation about the purpose of this instance.\",\r",
									"            \"default\": \"\",\r",
									"            \"examples\": [\r",
									"                \"1234a56f78b90cd\"\r",
									"            ]\r",
									"        }\r",
									"    },\r",
									"    \"additionalProperties\": true\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"Schema is as expected\", function() {\r",
									"    var response = pm.response.json();\r",
									"    \r",
									"    var result=tv4.validateResult(response, schema)\r",
									"    pm.expect(result.valid).to.be.true;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\" : \"admin\",\r\n    \"password\" : \"password123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{aitbaseURL}}/auth",
							"host": [
								"{{aitbaseURL}}"
							],
							"path": [
								"auth"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Booking",
			"item": [
				{
					"name": "GetBookingIds",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "07a5da58-8b60-44a9-931d-e282eaefae57",
								"exec": [
									"pm.test(\"Response Content-Type should be json\", function () {",
									"     pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');",
									"});",
									"",
									"pm.test(\"Status code should be 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"schema = {",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema\",",
									"    \"$id\": \"http://example.com/example.json\",",
									"    \"type\": \"array\",",
									"    \"title\": \"The root schema\",",
									"    \"description\": \"The root schema comprises the entire JSON document.\",",
									"    \"default\": [],",
									"    \"examples\": [",
									"        [",
									"            {",
									"                \"bookingid\": 1",
									"            },",
									"            {",
									"                \"bookingid\": 2",
									"            }",
									"        ]",
									"    ],",
									"    \"additionalItems\": true,",
									"    \"items\": {",
									"        \"$id\": \"#/items\",",
									"        \"anyOf\": [",
									"            {",
									"                \"$id\": \"#/items/anyOf/0\",",
									"                \"type\": \"object\",",
									"                \"title\": \"The first anyOf schema\",",
									"                \"description\": \"An explanation about the purpose of this instance.\",",
									"                \"default\": {},",
									"                \"examples\": [",
									"                    {",
									"                        \"bookingid\": 1",
									"                    }",
									"                ],",
									"                \"required\": [",
									"                    \"bookingid\"",
									"                ],",
									"                \"properties\": {",
									"                    \"bookingid\": {",
									"                        \"$id\": \"#/items/anyOf/0/properties/bookingid\",",
									"                        \"type\": \"integer\",",
									"                        \"title\": \"The bookingid schema\",",
									"                        \"description\": \"An explanation about the purpose of this instance.\",",
									"                        \"default\": 0,",
									"                        \"examples\": [",
									"                            1",
									"                        ]",
									"                    }",
									"                },",
									"                \"additionalProperties\": true",
									"            }",
									"        ]",
									"    }",
									"}",
									"",
									"pm.test(\"Schema is as expected\", function() {",
									"    var response = pm.response.json();",
									"    ",
									"    var result=tv4.validateResult(response, schema)",
									"    pm.expect(result.valid).to.be.true;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{aitbaseURL}}/booking",
							"host": [
								"{{aitbaseURL}}"
							],
							"path": [
								"booking"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetBooking",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3d80b1da-8b78-45d5-ab73-0b2ebba56be4",
								"exec": [
									"pm.test(\"Response Content-Type should be json\", function () {",
									"     pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');",
									"});",
									"",
									"pm.test(\"Status code should be 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// the below tests check fields  are not null/are required and their types string, boolean etc",
									"// this could be done by contract testing also - I'm not",
									"// precious about this but validating the schema feels quicker to me - perhaps we can discuss this :)?",
									"pm.test(\"Response should contain firstname\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.firstname).to.not.be.null;",
									"    pm.expect(jsonData.firstname).to.be.a('string');",
									"});",
									"",
									"pm.test(\"Response should contain lastname\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.lastname).to.not.be.null;",
									"    pm.expect(jsonData.lastname).to.be.a('string');",
									"});",
									"",
									"pm.test(\"Response should contain depositpaid\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.depositpaid).to.not.be.null;",
									"    pm.expect(jsonData.depositpaid).to.be.a('boolean');",
									"});",
									"",
									"pm.test(\"Response should contain bookingdates.checkin\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.bookingdates.checkin).to.not.be.null;",
									"    pm.expect(jsonData.bookingdates.checkin).to.be.a('string');",
									"});",
									"",
									"pm.test(\"Response should contain bookingdates.checkout\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.bookingdates.checkout).to.not.be.null;",
									"    pm.expect(jsonData.bookingdates.checkout).to.be.a('string');",
									"});",
									"",
									"",
									"schema = {",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema\",",
									"    \"$id\": \"http://example.com/example.json\",",
									"    \"type\": \"object\",",
									"    \"title\": \"The root schema\",",
									"    \"description\": \"The root schema comprises the entire JSON document.\",",
									"    \"default\": {},",
									"    \"examples\": [",
									"        {",
									"            \"firstname\": \"Litzy\",",
									"            \"lastname\": \"Abbott\",",
									"            \"totalprice\": 205,",
									"            \"depositpaid\": true,",
									"            \"bookingdates\": {",
									"                \"checkin\": \"2020-10-09\",",
									"                \"checkout\": \"2020-10-16\"",
									"            },",
									"            \"additionalneeds\": \"Bike\"",
									"        }",
									"    ],",
									"    \"required\": [",
									"        \"firstname\",",
									"        \"lastname\",",
									"        \"totalprice\",",
									"        \"depositpaid\",",
									"        \"bookingdates\",",
									"        \"additionalneeds\"",
									"    ],",
									"    \"properties\": {",
									"        \"firstname\": {",
									"            \"$id\": \"#/properties/firstname\",",
									"            \"type\": \"string\",",
									"            \"title\": \"The firstname schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": \"\",",
									"            \"examples\": [",
									"                \"Litzy\"",
									"            ]",
									"        },",
									"        \"lastname\": {",
									"            \"$id\": \"#/properties/lastname\",",
									"            \"type\": \"string\",",
									"            \"title\": \"The lastname schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": \"\",",
									"            \"examples\": [",
									"                \"Abbott\"",
									"            ]",
									"        },",
									"        \"totalprice\": {",
									"            \"$id\": \"#/properties/totalprice\",",
									"            \"type\": \"integer\",",
									"            \"title\": \"The totalprice schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": 0,",
									"            \"examples\": [",
									"                205",
									"            ]",
									"        },",
									"        \"depositpaid\": {",
									"            \"$id\": \"#/properties/depositpaid\",",
									"            \"type\": \"boolean\",",
									"            \"title\": \"The depositpaid schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": false,",
									"            \"examples\": [",
									"                true",
									"            ]",
									"        },",
									"        \"bookingdates\": {",
									"            \"$id\": \"#/properties/bookingdates\",",
									"            \"type\": \"object\",",
									"            \"title\": \"The bookingdates schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": {},",
									"            \"examples\": [",
									"                {",
									"                    \"checkin\": \"2020-10-09\",",
									"                    \"checkout\": \"2020-10-16\"",
									"                }",
									"            ],",
									"            \"required\": [",
									"                \"checkin\",",
									"                \"checkout\"",
									"            ],",
									"            \"properties\": {",
									"                \"checkin\": {",
									"                    \"$id\": \"#/properties/bookingdates/properties/checkin\",",
									"                    \"type\": \"string\",",
									"                    \"title\": \"The checkin schema\",",
									"                    \"description\": \"An explanation about the purpose of this instance.\",",
									"                    \"default\": \"\",",
									"                    \"examples\": [",
									"                        \"2020-10-09\"",
									"                    ]",
									"                },",
									"                \"checkout\": {",
									"                    \"$id\": \"#/properties/bookingdates/properties/checkout\",",
									"                    \"type\": \"string\",",
									"                    \"title\": \"The checkout schema\",",
									"                    \"description\": \"An explanation about the purpose of this instance.\",",
									"                    \"default\": \"\",",
									"                    \"examples\": [",
									"                        \"2020-10-16\"",
									"                    ]",
									"                }",
									"            },",
									"            \"additionalProperties\": true",
									"        },",
									"        \"additionalneeds\": {",
									"            \"$id\": \"#/properties/additionalneeds\",",
									"            \"type\": \"string\",",
									"            \"title\": \"The additionalneeds schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": \"\",",
									"            \"examples\": [",
									"                \"Bike\"",
									"            ]",
									"        }",
									"    },",
									"    \"additionalProperties\": true",
									"}",
									"",
									"",
									"pm.test(\"Schema is as expected\", function() {",
									"    var response = pm.response.json();",
									"    ",
									"    var result=tv4.validateResult(response, schema)",
									"    pm.expect(result.valid).to.be.true;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "59227e4a-b611-4849-8784-c0f94619906d",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{aitbaseURL}}/booking/{{bookingid}}",
							"host": [
								"{{aitbaseURL}}"
							],
							"path": [
								"booking",
								"{{bookingid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateBooking",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e9daedcb-360d-40ce-a203-2a008490734f",
								"exec": [
									"pm.test(\"Response Content-Type should be json\", function () {",
									"     pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');",
									"});",
									"",
									"// This test wail fail as the api status code is wrong",
									"// should be a 201 created note 201 Created",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"// This endopoint also allows you to inject XSS into the database and also retrieve it unsanitized",
									"// this could be very dangerous, alter the name from the dynamic variable and try:",
									"// \"firstname\": \"<script>alert('hello');>\",",
									"// when you retrieve this value you'll see it comes back as it was input",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"pm.environment.set(\"bookingid\", jsonData.bookingid);",
									"",
									"schema = {",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema\",",
									"    \"$id\": \"http://example.com/example.json\",",
									"    \"type\": \"object\",",
									"    \"title\": \"The root schema\",",
									"    \"description\": \"The root schema comprises the entire JSON document.\",",
									"    \"default\": {},",
									"    \"examples\": [",
									"        {",
									"            \"bookingid\": 11,",
									"            \"booking\": {",
									"                \"firstname\": \"Idell\",",
									"                \"lastname\": \"Kunde\",",
									"                \"totalprice\": 240,",
									"                \"depositpaid\": false,",
									"                \"bookingdates\": {",
									"                    \"checkin\": \"2020-10-09\",",
									"                    \"checkout\": \"2020-10-16\"",
									"                },",
									"                \"additionalneeds\": \"Soap\"",
									"            }",
									"        }",
									"    ],",
									"    \"required\": [",
									"        \"bookingid\",",
									"        \"booking\"",
									"    ],",
									"    \"properties\": {",
									"        \"bookingid\": {",
									"            \"$id\": \"#/properties/bookingid\",",
									"            \"type\": \"integer\",",
									"            \"title\": \"The bookingid schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": 0,",
									"            \"examples\": [",
									"                11",
									"            ]",
									"        },",
									"        \"booking\": {",
									"            \"$id\": \"#/properties/booking\",",
									"            \"type\": \"object\",",
									"            \"title\": \"The booking schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": {},",
									"            \"examples\": [",
									"                {",
									"                    \"firstname\": \"Idell\",",
									"                    \"lastname\": \"Kunde\",",
									"                    \"totalprice\": 240,",
									"                    \"depositpaid\": false,",
									"                    \"bookingdates\": {",
									"                        \"checkin\": \"2020-10-09\",",
									"                        \"checkout\": \"2020-10-16\"",
									"                    },",
									"                    \"additionalneeds\": \"Soap\"",
									"                }",
									"            ],",
									"            \"required\": [",
									"                \"firstname\",",
									"                \"lastname\",",
									"                \"totalprice\",",
									"                \"depositpaid\",",
									"                \"bookingdates\",",
									"                \"additionalneeds\"",
									"            ],",
									"            \"properties\": {",
									"                \"firstname\": {",
									"                    \"$id\": \"#/properties/booking/properties/firstname\",",
									"                    \"type\": \"string\",",
									"                    \"title\": \"The firstname schema\",",
									"                    \"description\": \"An explanation about the purpose of this instance.\",",
									"                    \"default\": \"\",",
									"                    \"examples\": [",
									"                        \"Idell\"",
									"                    ]",
									"                },",
									"                \"lastname\": {",
									"                    \"$id\": \"#/properties/booking/properties/lastname\",",
									"                    \"type\": \"string\",",
									"                    \"title\": \"The lastname schema\",",
									"                    \"description\": \"An explanation about the purpose of this instance.\",",
									"                    \"default\": \"\",",
									"                    \"examples\": [",
									"                        \"Kunde\"",
									"                    ]",
									"                },",
									"                \"totalprice\": {",
									"                    \"$id\": \"#/properties/booking/properties/totalprice\",",
									"                    \"type\": \"integer\",",
									"                    \"title\": \"The totalprice schema\",",
									"                    \"description\": \"An explanation about the purpose of this instance.\",",
									"                    \"default\": 0,",
									"                    \"examples\": [",
									"                        240",
									"                    ]",
									"                },",
									"                \"depositpaid\": {",
									"                    \"$id\": \"#/properties/booking/properties/depositpaid\",",
									"                    \"type\": \"boolean\",",
									"                    \"title\": \"The depositpaid schema\",",
									"                    \"description\": \"An explanation about the purpose of this instance.\",",
									"                    \"default\": false,",
									"                    \"examples\": [",
									"                        false",
									"                    ]",
									"                },",
									"                \"bookingdates\": {",
									"                    \"$id\": \"#/properties/booking/properties/bookingdates\",",
									"                    \"type\": \"object\",",
									"                    \"title\": \"The bookingdates schema\",",
									"                    \"description\": \"An explanation about the purpose of this instance.\",",
									"                    \"default\": {},",
									"                    \"examples\": [",
									"                        {",
									"                            \"checkin\": \"2020-10-09\",",
									"                            \"checkout\": \"2020-10-16\"",
									"                        }",
									"                    ],",
									"                    \"required\": [",
									"                        \"checkin\",",
									"                        \"checkout\"",
									"                    ],",
									"                    \"properties\": {",
									"                        \"checkin\": {",
									"                            \"$id\": \"#/properties/booking/properties/bookingdates/properties/checkin\",",
									"                            \"type\": \"string\",",
									"                            \"title\": \"The checkin schema\",",
									"                            \"description\": \"An explanation about the purpose of this instance.\",",
									"                            \"default\": \"\",",
									"                            \"examples\": [",
									"                                \"2020-10-09\"",
									"                            ]",
									"                        },",
									"                        \"checkout\": {",
									"                            \"$id\": \"#/properties/booking/properties/bookingdates/properties/checkout\",",
									"                            \"type\": \"string\",",
									"                            \"title\": \"The checkout schema\",",
									"                            \"description\": \"An explanation about the purpose of this instance.\",",
									"                            \"default\": \"\",",
									"                            \"examples\": [",
									"                                \"2020-10-16\"",
									"                            ]",
									"                        }",
									"                    },",
									"                    \"additionalProperties\": true",
									"                },",
									"                \"additionalneeds\": {",
									"                    \"$id\": \"#/properties/booking/properties/additionalneeds\",",
									"                    \"type\": \"string\",",
									"                    \"title\": \"The additionalneeds schema\",",
									"                    \"description\": \"An explanation about the purpose of this instance.\",",
									"                    \"default\": \"\",",
									"                    \"examples\": [",
									"                        \"Soap\"",
									"                    ]",
									"                }",
									"            },",
									"            \"additionalProperties\": true",
									"        }",
									"    },",
									"    \"additionalProperties\": true",
									"}",
									"",
									"pm.test(\"Schema is as expected\", function() {",
									"    var response = pm.response.json();",
									"    ",
									"    var result=tv4.validateResult(response, schema)",
									"    pm.expect(result.valid).to.be.true;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"firstname\": \"{{$randomFirstName}}\",\n    \"lastname\": \"{{$randomLastName}}\",\n    \"totalprice\" : {{totalprice}},\n    \"depositpaid\" : {{$randomBoolean}},\n    \"bookingdates\" : {\n        \"checkin\": \"{{checkin}}\",\n        \"checkout\": \"{{checkout}}\"\n    },\n    \"additionalneeds\" : \"{{$randomProduct}}\"\n}"
						},
						"url": {
							"raw": "{{aitbaseURL}}/booking",
							"host": [
								"{{aitbaseURL}}"
							],
							"path": [
								"booking"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateBooking",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "20ef2dcc-d94f-45de-b0fe-f280436016f8",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "5e21ca1f-ff68-43f3-bf25-521879b6b92a",
								"exec": [
									"pm.test(\"Response Content-Type should be json\", function () {",
									"     pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');",
									"});",
									"",
									"pm.test(\"Status code should be 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"// consider replacing the below checks with contract schema test similar to previous request tests?",
									"pm.test(\"Response should contain firstname\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.firstname).to.not.be.null;",
									"    pm.expect(jsonData.firstname).to.be.a('string');",
									"});",
									"",
									"pm.test(\"Response should contain lastname\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.lastname).to.not.be.null;",
									"    pm.expect(jsonData.lastname).to.be.a('string');",
									"});",
									"",
									"pm.test(\"Response should contain depositpaid\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.depositpaid).to.not.be.null;",
									"    pm.expect(jsonData.depositpaid).to.be.a('boolean');",
									"});",
									"",
									"pm.test(\"Response should contain bookingdates.checkin\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.bookingdates.checkin).to.not.be.null;",
									"    pm.expect(jsonData.bookingdates.checkin).to.be.a('string');",
									"});",
									"",
									"pm.test(\"Response should contain bookingdates.checkout\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.bookingdates.checkout).to.not.be.null;",
									"    pm.expect(jsonData.bookingdates.checkout).to.be.a('string');",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "password123",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Cookie",
								"value": "token={{authToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"firstname\": \"{{$randomFirstName}}\",\n    \"lastname\": \"{{$randomLastName}}\",\n    \"totalprice\" : {{totalprice}},\n    \"depositpaid\" : {{$randomBoolean}},\n    \"bookingdates\" : {\n        \"checkin\": \"{{checkin}}\",\n        \"checkout\": \"{{checkout}}\"\n    },\n    \"additionalneeds\" : \"{{$randomProduct}}\"\n}"
						},
						"url": {
							"raw": "{{aitbaseURL}}/booking/{{bookingid}}",
							"host": [
								"{{aitbaseURL}}"
							],
							"path": [
								"booking",
								"{{bookingid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteBooking",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9526cfb3-e996-4b1c-bca9-b9b3a9f4970d",
								"exec": [
									"// Test precondition: At least one booking exists, so create one",
									"var baseURL = pm.environment.get(\"aitbaseURL\");",
									"var requestURL = baseURL + \"/booking\";",
									"",
									"const echoPostRequest = {",
									"    url: requestURL,",
									"    method: 'POST',",
									"    header: 'Content-Type:application/json',",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify({",
									"            \"firstname\": pm.environment.get(\"firstname\"),",
									"            \"lastname\": pm.environment.get(\"lastname\"),",
									"            \"totalprice\": pm.environment.get(\"totalprice\"),",
									"            \"depositpaid\": pm.environment.get(\"depositpaid\"),",
									"            \"bookingdates\": {",
									"                \"checkin\": pm.environment.get(\"checkin\"),",
									"                \"checkout\": pm.environment.get(\"checkout\")",
									"            },",
									"            \"additionalneeds\": pm.environment.get(\"additionalneeds\")",
									"        })",
									"    }",
									"};",
									"",
									"pm.sendRequest(echoPostRequest, function (err, res) {",
									"    pm.environment.set(\"bookingid\", res.json().bookingid);",
									"    var logTitle = pm.info.requestName + \" | \" + pm.info.eventName + \":\\n\";",
									"    console.log(err ? err : logTitle + JSON.stringify(res.json(), null, 2));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "80b029ac-d0a1-4538-a52a-822fdbbbc0b7",
								"exec": [
									"pm.test(\"Response Content-Type should be json\", function () {",
									"     pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/plain; charset=utf-8');",
									"});",
									"",
									"var url = pm.environment.get(\"aitbaseURL\") + \"/booking\" +  pm.environment.get(\"bookingid\");",
									"",
									"const getRequest = {",
									"        url: url,",
									"        method: 'GET'",
									"};",
									"",
									"pm.sendRequest(getRequest, function (err, res) {",
									"    if (err) { ",
									"        console.log(err);",
									"    }",
									"    ",
									"    console.log(res);",
									"    ",
									"    pm.test('Response should be Not Found', function () {",
									"        pm.expect(res.status).to.include(\"Not Found\");",
									"    });",
									"    ",
									"    pm.test(\"Response code 404\", function() {",
									"        pm.expect(res.code).to.equal(404);",
									"    })",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "password123",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Cookie",
								"value": "token={{authToken}}"
							}
						],
						"url": {
							"raw": "{{aitbaseURL}}/booking/{{bookingid}}",
							"host": [
								"{{aitbaseURL}}"
							],
							"path": [
								"booking",
								"{{bookingid}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "2a30c519-da88-493e-9969-9072baf0805a",
						"type": "text/javascript",
						"exec": [
							"// var baseURL = pm.environment.get(\"baseURL\");",
							"// var requestURL = baseURL + \"/auth\";",
							"",
							"// const echoPostRequest = {",
							"//     url: requestURL,",
							"//     method: 'POST',",
							"//     header: 'Content-Type:application/json',",
							"//     body: {",
							"//         mode: 'raw',",
							"//         raw: JSON.stringify({",
							"//             \"username\": \"admin\",",
							"//             \"password\": \"password123\"",
							"//         })",
							"//     }",
							"// };",
							"",
							"// pm.sendRequest(echoPostRequest, function (err, res) {",
							"//     pm.environment.set(\"token\", res.json().token);",
							"//     var logTitle = pm.info.requestName + \" | \" + pm.info.eventName + \":\\n\";",
							"//     console.log(err ? err : logTitle + JSON.stringify(res.json(), null, 2));",
							"// });"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "58598964-99e1-4e09-8111-c676f6772800",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Branding",
			"item": [
				{
					"name": "GetBranding",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d1231cd7-694f-49d6-84b1-9de81aff572b",
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"// API Contract test to validate schema\r",
									"// To generate the below schema, send this request and then copy and paste the \r",
									"// response body into the following website https://jsonschema.net/home\r",
									"// Next copy the generated JSON schema into the below schema :-)\r",
									"schema = {\r",
									"    \"default\": {},\r",
									"    \"description\": \"The root schema comprises the entire JSON document.\",\r",
									"    \"required\": [\r",
									"        \"name\",\r",
									"        \"map\",\r",
									"        \"logoUrl\",\r",
									"        \"description\",\r",
									"        \"contact\"\r",
									"    ],\r",
									"    \"title\": \"The root schema\",\r",
									"    \"properties\": {\r",
									"        \"name\": {\r",
									"            \"$id\": \"#/properties/name\",\r",
									"            \"type\": \"string\",\r",
									"            \"title\": \"The name schema\",\r",
									"            \"description\": \"An explanation about the purpose of this instance.\",\r",
									"            \"default\": \"\",\r",
									"            \"examples\": [\r",
									"                \"Shady Meadows B&B\"\r",
									"            ]\r",
									"        },\r",
									"        \"map\": {\r",
									"            \"$id\": \"#/properties/map\",\r",
									"            \"type\": \"object\",\r",
									"            \"title\": \"The map schema\",\r",
									"            \"description\": \"An explanation about the purpose of this instance.\",\r",
									"            \"default\": {},\r",
									"            \"examples\": [\r",
									"                {\r",
									"                    \"latitude\": 52.6351204,\r",
									"                    \"longitude\": 1.2733774\r",
									"                }\r",
									"            ],\r",
									"            \"required\": [\r",
									"                \"latitude\",\r",
									"                \"longitude\"\r",
									"            ],\r",
									"            \"properties\": {\r",
									"                \"latitude\": {\r",
									"                    \"$id\": \"#/properties/map/properties/latitude\",\r",
									"                    \"type\": \"number\",\r",
									"                    \"title\": \"The latitude schema\",\r",
									"                    \"description\": \"An explanation about the purpose of this instance.\",\r",
									"                    \"default\": 0.0,\r",
									"                    \"examples\": [\r",
									"                        52.6351204\r",
									"                    ]\r",
									"                },\r",
									"                \"longitude\": {\r",
									"                    \"$id\": \"#/properties/map/properties/longitude\",\r",
									"                    \"type\": \"number\",\r",
									"                    \"title\": \"The longitude schema\",\r",
									"                    \"description\": \"An explanation about the purpose of this instance.\",\r",
									"                    \"default\": 0.0,\r",
									"                    \"examples\": [\r",
									"                        1.2733774\r",
									"                    ]\r",
									"                }\r",
									"            },\r",
									"            \"additionalProperties\": true\r",
									"        },\r",
									"        \"logoUrl\": {\r",
									"            \"$id\": \"#/properties/logoUrl\",\r",
									"            \"type\": \"string\",\r",
									"            \"title\": \"The logoUrl schema\",\r",
									"            \"description\": \"An explanation about the purpose of this instance.\",\r",
									"            \"default\": \"\",\r",
									"            \"examples\": [\r",
									"                \"https://www.mwtestconsultancy.co.uk/img/rbp-logo.png\"\r",
									"            ]\r",
									"        },\r",
									"        \"description\": {\r",
									"            \"$id\": \"#/properties/description\",\r",
									"            \"type\": \"string\",\r",
									"            \"title\": \"The description schema\",\r",
									"            \"description\": \"An explanation about the purpose of this instance.\",\r",
									"            \"default\": \"\",\r",
									"            \"examples\": [\r",
									"                \"Welcome to Shady Meadows, a delightful Bed & Breakfast nestled in the hills on Newingtonfordburyshire. A place so beautiful you will never want to leave. All our rooms have comfortable beds and we provide breakfast from the locally sourced supermarket. It is a delightful place.\"\r",
									"            ]\r",
									"        },\r",
									"        \"contact\": {\r",
									"            \"$id\": \"#/properties/contact\",\r",
									"            \"type\": \"object\",\r",
									"            \"title\": \"The contact schema\",\r",
									"            \"description\": \"An explanation about the purpose of this instance.\",\r",
									"            \"default\": {},\r",
									"            \"examples\": [\r",
									"                {\r",
									"                    \"name\": \"Shady Meadows B&B\",\r",
									"                    \"address\": \"The Old Farmhouse, Shady Street, Newfordburyshire, NE1 410S\",\r",
									"                    \"phone\": \"012345678901\",\r",
									"                    \"email\": \"fake@fakeemail.com\"\r",
									"                }\r",
									"            ],\r",
									"            \"required\": [\r",
									"                \"name\",\r",
									"                \"address\",\r",
									"                \"phone\",\r",
									"                \"email\"\r",
									"            ],\r",
									"            \"properties\": {\r",
									"                \"name\": {\r",
									"                    \"$id\": \"#/properties/contact/properties/name\",\r",
									"                    \"type\": \"string\",\r",
									"                    \"title\": \"The name schema\",\r",
									"                    \"description\": \"An explanation about the purpose of this instance.\",\r",
									"                    \"default\": \"\",\r",
									"                    \"examples\": [\r",
									"                        \"Shady Meadows B&B\"\r",
									"                    ]\r",
									"                },\r",
									"                \"address\": {\r",
									"                    \"$id\": \"#/properties/contact/properties/address\",\r",
									"                    \"type\": \"string\",\r",
									"                    \"title\": \"The address schema\",\r",
									"                    \"description\": \"An explanation about the purpose of this instance.\",\r",
									"                    \"default\": \"\",\r",
									"                    \"examples\": [\r",
									"                        \"The Old Farmhouse, Shady Street, Newfordburyshire, NE1 410S\"\r",
									"                    ]\r",
									"                },\r",
									"                \"phone\": {\r",
									"                    \"$id\": \"#/properties/contact/properties/phone\",\r",
									"                    \"type\": \"string\",\r",
									"                    \"title\": \"The phone schema\",\r",
									"                    \"description\": \"An explanation about the purpose of this instance.\",\r",
									"                    \"default\": \"\",\r",
									"                    \"examples\": [\r",
									"                        \"012345678901\"\r",
									"                    ]\r",
									"                },\r",
									"                \"email\": {\r",
									"                    \"$id\": \"#/properties/contact/properties/email\",\r",
									"                    \"type\": \"string\",\r",
									"                    \"title\": \"The email schema\",\r",
									"                    \"description\": \"An explanation about the purpose of this instance.\",\r",
									"                    \"default\": \"\",\r",
									"                    \"examples\": [\r",
									"                        \"fake@fakeemail.com\"\r",
									"                    ]\r",
									"                }\r",
									"            },\r",
									"            \"additionalProperties\": true\r",
									"        }\r",
									"    },\r",
									"    \"additionalProperties\": true\r",
									"}\r",
									"\r",
									"pm.test(\"Schema is as expected\", function() {\r",
									"    var response = pm.response.json();\r",
									"    \r",
									"    var result=tv4.validateResult(response, schema)\r",
									"    pm.expect(result.valid).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Response body values are as expected\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"   \r",
									"    pm.expect(jsonData.name).to.equal(\"Shady Meadows B&B\")\r",
									"    pm.expect(jsonData.map.latitude).to.equal(52.6351204)\r",
									"    pm.expect(jsonData.map.longitude).to.equal(1.2733774)\r",
									"    pm.expect(jsonData.logoUrl).to.equal(\"https://www.mwtestconsultancy.co.uk/img/rbp-logo.png\")\r",
									"    pm.expect(jsonData.description).to.equal(\"Welcome to Shady Meadows, a delightful Bed & Breakfast nestled in the hills on Newingtonfordburyshire. A place so beautiful you will never want to leave. All our rooms have comfortable beds and we provide breakfast from the locally sourced supermarket. It is a delightful place.\")\r",
									"    \r",
									"    pm.expect(jsonData.contact.name).to.equal(\"Shady Meadows B&B\")\r",
									"    pm.expect(jsonData.contact.address).to.equal(\"The Old Farmhouse, Shady Street, Newfordburyshire, NE1 410S\")\r",
									"    pm.expect(jsonData.contact.phone).to.equal(\"012345678901\")\r",
									"    pm.expect(jsonData.contact.email).to.equal(\"fake@fakeemail.com\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://automationintesting.online/branding/",
							"protocol": "https",
							"host": [
								"automationintesting",
								"online"
							],
							"path": [
								"branding",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateBranding",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7795e39f-3a04-4960-af5a-4cb57b9c177e",
								"exec": [
									"pm.test(\"Status code is 202\", function () {\r",
									"    pm.response.to.have.status(202);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true,
							"accept-encoding": true,
							"connection": true
						}
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Cookie",
								"value": "token={{authToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Shady Meadows B&B\",\r\n    \"map\": {\r\n        \"latitude\": \"46.187573\",\r\n        \"longitude\": \"-123.832640\"\r\n    },\r\n    \"logoUrl\": \"https://www.mwtestconsultancy.co.uk/img/rbp-logo.png\",\r\n    \"description\": \"Welcome to The Goonies House, a delightful Bed & Breakfast nestled in the hills of Astoria, Oregon. A place so beautiful you will never want to leave. All our rooms have comfortable beds and we provide breakfast from the locally sourced supermarket. It is a delightful place.\",\r\n    \"contact\": {\r\n        \"name\": \"Shady Meadows B&B\",\r\n        \"address\": \"The Old Farmhouse, Shady Street, Newfordburyshire, NE1 410S\",\r\n        \"phone\": \"012345678901\",\r\n        \"email\": \"fake@fakeemail.com\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://automationintesting.online/branding/",
							"protocol": "https",
							"host": [
								"automationintesting",
								"online"
							],
							"path": [
								"branding",
								""
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Report",
			"item": [
				{
					"name": "Report",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05a6f238-e434-403c-a91b-98c4ef9d736e",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://automationintesting.online/report/",
							"protocol": "https",
							"host": [
								"automationintesting",
								"online"
							],
							"path": [
								"report",
								""
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Messaging",
			"item": [
				{
					"name": "Message",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c53b20fc-c2ba-4d54-b494-bebf0fe6dfcb",
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"postman.setEnvironmentVariable(\"messageid\", jsonData.messageid);\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"test\",\r\n    \"email\": \"test@test.com\",\r\n    \"phone\": \"07797998887\",\r\n    \"subject\": \"test message\",\r\n    \"description\": \"test message your hotel is awesome\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://automationintesting.online/message/",
							"protocol": "https",
							"host": [
								"automationintesting",
								"online"
							],
							"path": [
								"message",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "MessageRead",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "facc75b9-2010-413c-b43e-08293700c670",
								"exec": [
									"pm.test(\"Status code is 202\", function () {\r",
									"    pm.response.to.have.status(202);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Cookie",
								"value": "token={{authToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://automationintesting.online/message/{{messageid}}/read",
							"protocol": "https",
							"host": [
								"automationintesting",
								"online"
							],
							"path": [
								"message",
								"{{messageid}}",
								"read"
							]
						}
					},
					"response": []
				},
				{
					"name": "Message",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "76808cc4-05ef-42b1-8a7d-5f1378f872e9",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://automationintesting.online/message/{{messageid}}",
							"protocol": "https",
							"host": [
								"automationintesting",
								"online"
							],
							"path": [
								"message",
								"{{messageid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Messages",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6ef97e83-0f71-437e-bf41-a3202db6ce81",
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var messageId = pm.environment.get(\"messageid\")\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"tests[\"posted message has been read\"] = data.messages[messageId -1].read === true;\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://automationintesting.online/message/",
							"protocol": "https",
							"host": [
								"automationintesting",
								"online"
							],
							"path": [
								"message",
								""
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Room",
			"item": [
				{
					"name": "Room",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "163260e0-b3d2-4121-9ff0-f7c538e62a86",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{aitbaseURL}}/room/",
							"host": [
								"{{aitbaseURL}}"
							],
							"path": [
								"room",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Room",
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": ""
						}
					},
					"response": []
				},
				{
					"name": "Room",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "032d5d86-f91b-4079-9afb-3659863b38b4",
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"postman.setEnvironmentVariable(\"roomid\", jsonData.roomid);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"value": "token = {{authToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"roomNumber\": \"666\",\r\n    \"type\": \"Single\",\r\n    \"accessible\": \"true\",\r\n    \"description\": \"Please enter a description for this room\",\r\n    \"image\": \"https://www.mwtestconsultancy.co.uk/img/room1.jpg\",\r\n    \"roomPrice\": \"300\",\r\n    \"features\": [\r\n        \"WiFi\",\r\n        \"Views\"\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{aitbaseURL}}/room/",
							"host": [
								"{{aitbaseURL}}"
							],
							"path": [
								"room",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Room",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2bb64088-b164-45c4-a2f6-38f145ec1131",
								"exec": [
									"pm.test(\"Status code is 202\", function () {\r",
									"    pm.response.to.have.status(202);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Cookie",
								"value": "token = {{authToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{aitbaseURL}}/room/{{roomid}}",
							"host": [
								"{{aitbaseURL}}"
							],
							"path": [
								"room",
								"{{roomid}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "c499f343-22cc-4a27-9509-2e3cde12d79a",
				"type": "text/javascript",
				"exec": [
					"var dateNow = new Date();",
					"pm.environment.set(\"checkin\", dateNow.toISOString().split('T')[0]);",
					"pm.environment.set(\"checkout\",  new Date(dateNow.setDate(dateNow.getDate() + 7)).toISOString().split('T')[0]);",
					"",
					"",
					"function generateRandomInteger(min, max) {",
					"  return Math.floor(min + Math.random()*(max + 1 - min))",
					"}",
					"",
					"pm.environment.set(\"totalprice\", generateRandomInteger(100,250));",
					"",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "973f4d6b-e72d-430a-9566-d1f54be2bab8",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "ec461322-0b90-4f45-8a19-ed2c5907b033",
			"key": "checkin",
			"value": ""
		},
		{
			"id": "eae22d30-6df1-4651-a7b7-3d7bcb5a0d4e",
			"key": "checkout",
			"value": ""
		},
		{
			"id": "a89d814b-2dcf-4939-a5f9-0d2bc400ce0e",
			"key": "totalpaid",
			"value": ""
		},
		{
			"id": "ea70b023-03fb-484e-907f-d7b15d01e325",
			"key": "totalprice",
			"value": ""
		}
	],
	"protocolProfileBehavior": {}
}